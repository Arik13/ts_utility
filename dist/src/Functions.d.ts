export declare function deeplog(...args: any[]): void;
export declare function deeplogN(n: number, ...args: any[]): void;
export declare const compose: <T, V>(...args: readonly [(x: T) => any, ...any[], (x: any) => V]) => (x: V) => T;
export declare const pipe: <T, V>(...args: readonly [(x: T) => any, ...any[], (x: any) => V]) => (x: T) => V;
export declare function isNumeric(str: string): boolean;
export declare let containerWordFinder: (words: (string | RegExp)[], path?: string[]) => (x: string[] | any) => boolean;
export declare let wordFinder: (exps: (string | RegExp)[]) => (target: string) => boolean;
export declare let groupByIndexSorter: (indices: number[]) => (a: any[], b: any[]) => number;
export declare let reduceMax: (p: number, c: number) => number;
export declare let toOrdinalNumeral: (n: number) => string;
export declare let generateOrdinalNumerals: (top: number) => string[];
export declare let calcPercDistribution: (buckets: number) => any[];
export declare let convertColumnsToRows: (table: any[][]) => any[][];
export declare let accumulatedSumsToDiffs: (x: number, i: number, a: number[]) => number;
export declare let diffsToAccumulatingSums: (x: number, i: number) => number;
export declare let merge: (arr2: any[]) => (x: any, i: number) => any[];
export declare let arraysEqual: (a: any[], b: any[], pred?: (a: any, b: any) => boolean) => boolean;
export declare let tablesEqual: (a: any[][], b: any[][], pred?: (a: any, b: any) => boolean) => boolean;
export declare let generatePassword: (length?: number) => void;
export declare let unique: <T>(x: T, i: number, a: T[]) => boolean;
export declare let uniqueCompare: <T>(equal: (x: T, y: T) => boolean) => (x: T, i: number, a: T[]) => boolean;
export declare let calcSetDifference: (u: Map<any, any>, v: Map<any, any>) => any[];
