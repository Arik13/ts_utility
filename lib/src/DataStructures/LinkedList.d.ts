export declare class LinkedList<T> {
    size: number;
    private head;
    private tail;
    constructor(array?: T[]);
    get(index: number): T;
    set(index: number, data: T): void;
    insert(index: number, data: T): void;
    delete(index: number): void;
    push(...data: T[]): void;
    pop(): T;
    toArray(): T[];
    toString(): string;
    find(predicate: (value: T, index?: number) => boolean): T;
    findIndex(predicate: (value: T, index: number) => boolean): number;
    indexOf(searchElement: T): number;
    includes(searchElement: T): boolean;
    shift(): T;
    unshift(...items: T[]): number;
    map(mapFunc: (value: T, index: number) => any): LinkedList<unknown>;
    reduce(reducer: (accumulator: any, value: T, index: number) => any): T;
    reduceRight(reducer: (accumulator: any, value: T, index: number) => any): T;
    filter(predicate: (value: T, index: number) => boolean): LinkedList<unknown>;
    forEach(callback: (value: T, index: number) => void): void;
    swap(indexOne: number, indexTwo: number): void;
    some(predicate: (value: T, index: number) => boolean): boolean;
    every(predicate: (value: T, index: number) => boolean): boolean;
    sort(comparator: (value1: T, value2: T) => number): void;
    rotateLeft(): void;
    rotateRight(): void;
    move(startIndex: number, endIndex: number): void;
    private getNode;
    private traverse;
    private init;
}
